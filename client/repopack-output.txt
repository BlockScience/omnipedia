This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-27T20:35:25.495Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
components/
  ArticleSelector.tsx
  GenerateCitations.tsx
  Omnipedia.tsx
  RequirementsSidebar.tsx
  SectionFeedback.tsx
lib/
  data.ts
  json.ts
  types.ts
  utils.ts

================================================================
Repository Files
================================================================

================
File: components/ArticleSelector.tsx
================
import React from "react";
import useSWR from "swr";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import { ChevronDown } from "lucide-react";

export const ArticleSelector = ({
  onSelect,
}: {
  onSelect: (source: string, acronym: string) => void;
}) => {
  const acronyms = ["ADCYAP1", "AGK", "ATF1", "ABCC11", "ANLN"];
  const sources = ["wikipedia", "wikicrow"];

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" className="w-[200px] justify-between">
          Select Article
          <ChevronDown className="ml-2 h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>

      <DropdownMenuContent className="w-[200px]">
        {sources.map((source) => (
          <DropdownMenuSub key={source}>
            <DropdownMenuSubTrigger className="capitalize">
              {source}
            </DropdownMenuSubTrigger>
            <DropdownMenuSubContent>
              {acronyms.map((acronym) => (
                <DropdownMenuItem
                  key={`${source}-${acronym}`}
                  onClick={() => onSelect(source, acronym)}
                >
                  {acronym}
                </DropdownMenuItem>
              ))}
            </DropdownMenuSubContent>
          </DropdownMenuSub>
        ))}
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

================
File: components/GenerateCitations.tsx
================
export const GenerateCitations = ({
  citationsArray,
}: {
  citationsArray?: { citation: string; link: string }[];
}) => {
  return (
    citationsArray && (
      <ol className="list-decimal pl-4 space-y-2">
        {citationsArray.map((item, index) => (
          <li key={index} className="text-gray-700">
            {item.citation}{" "}
            <a
              href={item.link}
              target="_blank"
              rel="noopener noreferrer"
              className="text-blue-600 hover:underline"
            >
              {item.link}
            </a>
            .
          </li>
        ))}
      </ol>
    )
  );
};

================
File: components/Omnipedia.tsx
================
"use client";

import React, { useEffect, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import { ChevronDown, ChevronUp } from "lucide-react";
import { SectionFeedback } from "@/components/SectionFeedback";
import { RequirementsSidebar } from "@/components/RequirementsSidebar";
import { requirementsData } from "@/lib/data";
import { GenerateCitations } from "./GenerateCitations";
import useSWR from "swr";
import { ArticleSelector } from "./ArticleSelector";
import {
  ArticleSection,
  SectionState,
  CategoryScore,
  Feedback,
  RequirementClassification,
  RequirementEvaluation,
} from "@/lib/types";

interface SelectedRequirement {
  id: string;
  category: string;
}

interface FilterHistoryEntry {
  searchQuery: string;
  classification: RequirementClassification | null;
  lastUsed: Date;
}

const MainContent = () => {
  // Core state
  const [selectedPath, setSelectedPath] = useState("");
  const [article, setArticle] = useState<ArticleSection[]>([]);
  const [evaluation, setEvaluation] = useState<ArticleSection[]>([]);
  const [selectedSection, setSelectedSection] = useState<string | null>(null);
  const [feedback, setFeedback] = useState<Feedback>();

  // Enhanced state
  const [selectedRequirements, setSelectedRequirements] = useState<
    SelectedRequirement[]
  >([]);
  const [sectionStates, setSectionStates] = useState<
    Record<string, SectionState>
  >({});
  const [categoryScores, setCategoryScores] = useState<
    Record<string, CategoryScore>
  >({});
  const [filterHistory, setFilterHistory] = useState<FilterHistoryEntry[]>([]);

  const fetcher = (url: string) => fetch(url).then((res) => res.json());

  const { data: evaluationData, error: evaluationError } = useSWR(
    `/api/evaluation?path=${encodeURIComponent(selectedPath)}`,
    fetcher,
    { revalidateOnFocus: false, revalidateOnReconnect: false }
  );

  const { data: articleData, error: articleError } = useSWR(
    `/api/articles?path=${encodeURIComponent(selectedPath)}`,
    fetcher,
    { revalidateOnFocus: false, revalidateOnReconnect: false }
  );

  // Section state management
  const toggleSection = (title: string) => {
    setSectionStates((prev) => ({
      ...prev,
      [title]: {
        isExpanded: !prev[title]?.isExpanded,
        lastViewed: new Date(),
        scores: prev[title]?.scores || {},
      },
    }));
    setSelectedSection((prev) => (prev === title ? null : title));
  };

  // Requirement selection management
  const toggleRequirement = (id: string, category: string) => {
    setSelectedRequirements((prev) => {
      const exists = prev.find((req) => req.id === id);
      if (exists) {
        return prev.filter((req) => req.id !== id);
      }
      return [...prev, { id, category }];
    });
  };

  // Score management with caching
  const updateCategoryScore = (
    category: string,
    evaluations: RequirementEvaluation[]
  ) => {
    const currentTime = new Date();
    const cached = categoryScores[category];

    if (
      cached &&
      currentTime.getTime() - cached.lastCalculated.getTime() < 5000
    ) {
      return cached.score;
    }

    const score =
      evaluations.reduce((acc, evaluation) => acc + evaluation.score, 0) /
      evaluations.length;

    setCategoryScores((prev) => ({
      ...prev,
      [category]: {
        score,
        lastCalculated: currentTime,
        evaluations,
      },
    }));

    return score;
  };

  // Data initialization and updates
  useEffect(() => {
    if (evaluationData?.data) {
      // Add the optional chaining here
      const { data } = evaluationData;
      setEvaluation(data);

      // Initialize or update section states
      const newSectionStates: Record<string, SectionState> = {};
      data.forEach((section: ArticleSection) => {
        newSectionStates[section.title] = {
          isExpanded: sectionStates[section.title]?.isExpanded || false,
          lastViewed: new Date(),
          scores: sectionStates[section.title]?.scores || {},
        };
      });
      setSectionStates(newSectionStates);
    }
  }, [evaluationData]);

  useEffect(() => {
    if (articleData?.data) {
      // Add the same check here for consistency
      const { data } = articleData;
      setArticle(data);
    }
  }, [articleData]);

  useEffect(() => {
    if (articleData) {
      const { data } = articleData;
      setArticle(data);
    }
  }, [articleData]);

  // Feedback updates
  useEffect(() => {
    if (selectedSection && evaluation) {
      const section = evaluation.find(
        (item) => item?.title === selectedSection
      );
      if (section) {
        setFeedback(section.feedback);
      }
    }
  }, [selectedSection, evaluation]);

  const handleArticleSelect = (source: string, acronym: string) => {
    const newPath = `${source}/${acronym}`;
    setSelectedPath(newPath);
    // Preserve states but clear current section
    setSelectedSection(null);
    setFeedback(undefined);
  };

  const handleFilterChange = (
    searchQuery: string,
    classification: RequirementClassification | null
  ) => {
    setFilterHistory((prev) => [
      {
        searchQuery,
        classification,
        lastUsed: new Date(),
      },
      ...prev.slice(0, 9), // Keep last 10 filters
    ]);
  };

  if (!articleData || !evaluationData) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="text-center">
          <span className="loading loading-spinner"></span>
          <p>Loading...</p>
        </div>
      </div>
    );
  }

  if (articleError || evaluationError) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="text-center text-red-500">
          <p>Error loading data</p>
        </div>
      </div>
    );
  }

  return (
    <ScrollArea className="h-auto w-full max-w-6xl mx-auto p-4 overflow-hidden">
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="text-3xl">
              {(article && article[0]?.title) || "Select an Article"}
            </CardTitle>
            <ArticleSelector onSelect={handleArticleSelect} />
          </div>
        </CardHeader>
      </Card>

      {article &&
        article.map((section, index) =>
          section.content !== "" ||
          (section.citations && section.citations.length > 0) ? (
            <Card
              key={index}
              className={`mb-2 ${
                selectedRequirements.some((req) =>
                  section.content.toLowerCase().includes(req.id.toLowerCase())
                )
                  ? "ring-2 ring-blue-500"
                  : ""
              }`}
            >
              <CardHeader
                className="flex flex-row items-center justify-between cursor-pointer"
                onClick={() => toggleSection(section.title)}
              >
                <CardTitle>{section.title}</CardTitle>
                {sectionStates[section.title]?.isExpanded ? (
                  <ChevronUp className="h-6 w-6" />
                ) : (
                  <ChevronDown className="h-6 w-6" />
                )}
              </CardHeader>
              <CardContent className="pb-0">
                <div>
                  {section.content && section.content.trim() !== "" && (
                    <div className="mb-4 text-gray-700">{section.content}</div>
                  )}
                  {section.citations && section.citations.length > 0 && (
                    <GenerateCitations citationsArray={section.citations} />
                  )}
                </div>
                {selectedSection === section.title && feedback && (
                  <SectionFeedback
                    feedback={feedback}
                    sectionState={sectionStates[section.title]}
                    selectedRequirements={
                      new Set(selectedRequirements.map((r) => r.id))
                    }
                    onRequirementSelect={toggleRequirement}
                    onScoreUpdate={(category, score) => {
                      setSectionStates((prev) => ({
                        ...prev,
                        [section.title]: {
                          ...prev[section.title],
                          scores: {
                            ...prev[section.title].scores,
                            [category]: score,
                          },
                        },
                      }));
                    }}
                  />
                )}
              </CardContent>
            </Card>
          ) : null
        )}
    </ScrollArea>
  );
};

export const Omnipedia = () => {
  return (
    <div className="flex h-screen">
      <RequirementsSidebar groups={requirementsData.groups} />
      <main className="flex-1 overflow-auto mt-8">
        <MainContent />
      </main>
    </div>
  );
};

================
File: components/RequirementsSidebar.tsx
================
import React, { useState, useMemo } from "react";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import {
  HoverCard,
  HoverCardContent,
  HoverCardTrigger,
} from "@/components/ui/hover-card";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Search, MapPin, Clock, Info } from "lucide-react";

// Classification types
export type RequirementClassification =
  | "Imperative Standards"
  | "Best Practices"
  | "Flexible Guidelines"
  | "Contextual Considerations";

// Single requirement
export interface Requirement {
  id: string;
  description: string;
  reference?: string;
  classification: RequirementClassification;
  where: string;
  when: string;
}

// Group of requirements
export interface RequirementGroup {
  description: string;
  requirements: Requirement[];
}

// Full requirements index
export interface RequirementsIndex {
  groups: {
    [key: string]: RequirementGroup;
  };
}

// Props for the sidebar component
export interface RequirementsSidebarProps {
  groups: RequirementsIndex["groups"];
}

// Props for the requirement component
export interface RequirementProps {
  requirement: Requirement;
}

// Classification badge variants
const getClassificationBadge = (classification: string) => {
  switch (classification) {
    case "Imperative Standards":
      return <Badge variant="destructive">Imperative</Badge>;
    case "Best Practices":
      return <Badge variant="secondary">Best Practice</Badge>;
    case "Flexible Guidelines":
      return <Badge variant="outline">Flexible</Badge>;
    case "Contextual Considerations":
      return <Badge>Contextual</Badge>;
    default:
      return <Badge variant="outline">{classification}</Badge>;
  }
};

const Requirement = ({ requirement }: RequirementProps) => (
  <HoverCard>
    <HoverCardTrigger asChild>
      <div className="flex items-center gap-2 p-2 rounded hover:bg-gray-100 cursor-pointer group">
        <div className="w-8 text-sm font-medium text-gray-500">
          {requirement.id}
        </div>
        <div className="flex-1 text-sm group-hover:text-gray-900">
          {requirement.description}
        </div>
        {getClassificationBadge(requirement.classification)}
      </div>
    </HoverCardTrigger>
    <HoverCardContent className="w-80">
      <div className="space-y-3">
        <div>
          <h4 className="font-medium flex items-center gap-2">
            {requirement.id}
            {getClassificationBadge(requirement.classification)}
          </h4>
          <p className="text-sm text-gray-600 mt-1">
            {requirement.description}
          </p>
        </div>

        <Separator />

        <div className="space-y-2">
          <div className="flex items-center gap-2 text-sm">
            <MapPin className="h-4 w-4 text-gray-500" />
            <span>{requirement.where}</span>
          </div>
          <div className="flex items-center gap-2 text-sm">
            <Clock className="h-4 w-4 text-gray-500" />
            <span>{requirement.when}</span>
          </div>
        </div>

        {requirement.reference && (
          <div className="pt-2">
            <p className="text-xs text-gray-500 italic">
              "{requirement.reference}"
            </p>
          </div>
        )}
      </div>
    </HoverCardContent>
  </HoverCard>
);

export const RequirementsSidebar = ({ groups }: RequirementsSidebarProps) => {
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedClassification, setSelectedClassification] = useState<
    string | null
  >(null);

  // Search function
  const filteredGroups = useMemo<RequirementsIndex["groups"]>(() => {
    const searchLower = searchQuery.toLowerCase();

    return Object.entries(groups).reduce<RequirementsIndex["groups"]>(
      (acc, [groupName, group]) => {
        const filteredRequirements = group.requirements.filter((req) => {
          // Filter by classification if selected
          if (
            selectedClassification &&
            req.classification !== selectedClassification
          ) {
            return false;
          }

          // Search across all fields
          return (
            req.id.toLowerCase().includes(searchLower) ||
            req.description.toLowerCase().includes(searchLower) ||
            req.where.toLowerCase().includes(searchLower) ||
            req.when.toLowerCase().includes(searchLower) ||
            (req.reference &&
              req.reference.toLowerCase().includes(searchLower)) ||
            req.classification.toLowerCase().includes(searchLower)
          );
        });

        if (filteredRequirements.length > 0) {
          acc[groupName] = {
            ...group,
            requirements: filteredRequirements,
          };
        }

        return acc;
      },
      {}
    );
  }, [groups, searchQuery, selectedClassification]);
  const classifications = useMemo(
    () =>
      Array.from(
        new Set(
          Object.values(groups)
            .flatMap((group) => group.requirements)
            .map((req) => req.classification)
        )
      ),
    [groups]
  );

  return (
    <div className="w-80 h-screen border-r bg-gray-50 flex flex-col">
      {/* Info Header */}
      <div className="p-4 bg-white border-b">
        <Alert>
          <Info className="h-4 w-4" />
          <AlertTitle>Requirements Index</AlertTitle>
          <AlertDescription className="text-xs text-gray-600">
            Browse and search content requirements by category, classification,
            or keyword.
          </AlertDescription>
        </Alert>
      </div>

      {/* Search and Filters */}
      <div className="p-4 border-b bg-white space-y-4">
        <div className="relative">
          <Search className="absolute left-2 top-2.5 h-4 w-4 text-gray-500" />
          <Input
            placeholder="Search requirements..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-8"
          />
        </div>

        <div className="flex flex-wrap gap-2">
          <Button
            variant={!selectedClassification ? "secondary" : "outline"}
            size="sm"
            onClick={() => setSelectedClassification(null)}
          >
            All
          </Button>
          {classifications.map((classification) => (
            <Button
              key={classification}
              variant={
                selectedClassification === classification
                  ? "secondary"
                  : "outline"
              }
              size="sm"
              onClick={() => setSelectedClassification(classification)}
            >
              {classification.split(" ")[0]}
            </Button>
          ))}
        </div>
      </div>

      {/* Requirements List */}
      <ScrollArea className="flex-1">
        <div className="p-4">
          <Accordion type="multiple" className="space-y-2">
            {Object.entries(filteredGroups).map(([groupName, group]) => (
              <AccordionItem key={groupName} value={groupName}>
                <AccordionTrigger className="hover:no-underline">
                  <div className="flex items-center gap-2">
                    <span>{groupName}</span>
                    <Badge variant="secondary">
                      {group.requirements.length}
                    </Badge>
                  </div>
                </AccordionTrigger>
                <AccordionContent>
                  <div className="px-2 pt-2 text-xs text-gray-500">
                    {group.description}
                  </div>
                  <div className="mt-2">
                    {group.requirements.map((req) => (
                      <Requirement key={req.id} requirement={req} />
                    ))}
                  </div>
                </AccordionContent>
              </AccordionItem>
            ))}
          </Accordion>
        </div>
      </ScrollArea>

      {/* Stats Footer */}
      <div className="p-4 border-t bg-white">
        <div className="flex justify-between text-sm text-gray-600">
          <span>
            {Object.values(filteredGroups).reduce(
              (acc, group) => acc + group.requirements.length,
              0
            )}{" "}
            requirements
          </span>
          <span>{Object.keys(filteredGroups).length} groups</span>
        </div>
      </div>
    </div>
  );
};

================
File: components/SectionFeedback.tsx
================
import React from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "./ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { ScrollArea } from "@/components/ui/scroll-area";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { AlertCircle, CheckCircle, Info, HelpCircle } from "lucide-react";
import { requirementsData } from "@/lib/data";
import {
  CategoryScore,
  Feedback,
  RequirementEvaluation,
  SectionState,
} from "@/lib/types";

interface SectionFeedbackProps {
  feedback: Feedback;
  sectionState: SectionState;
  onRequirementSelect: (requirementId: string, category: string) => void;
  selectedRequirements: Set<string>;
  onScoreUpdate: (category: string, score: CategoryScore) => void;
}

export const SectionFeedback: React.FC<SectionFeedbackProps> = ({
  feedback,
  sectionState,
  onRequirementSelect,
  selectedRequirements,
  onScoreUpdate,
}) => {
  const calculateCategoryScore = (
    category: string,
    evaluations: RequirementEvaluation[]
  ) => {
    // Check if we have a cached score that's less than 5 seconds old
    const cachedScore = sectionState.scores[category];
    if (
      cachedScore &&
      new Date().getTime() - cachedScore.lastCalculated.getTime() < 5000
    ) {
      return cachedScore.score;
    }

    // Calculate new score
    if (!evaluations.length) return 0;
    const scores = evaluations.map((req) => req.score);
    const average = scores.reduce((acc, curr) => acc + curr, 0) / scores.length;

    // Cache the new score
    const newScore = {
      score: average,
      lastCalculated: new Date(),
      evaluations,
    };
    onScoreUpdate(category, newScore);

    return average;
  };

  const getScoreBadgeVariant = (score: number) => {
    if (score >= 0.8) return "secondary";
    if (score >= 0.6) return "outline";
    return "destructive";
  };

  if (!feedback) return null;

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          Section Feedback
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger>
                <HelpCircle className="h-5 w-5 text-gray-400" />
              </TooltipTrigger>
              <TooltipContent>
                <p>Detailed feedback for each category and requirement</p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
        </CardTitle>
        <CardDescription>
          Analysis of content requirements and guidelines
        </CardDescription>
      </CardHeader>

      <CardContent className="mb-0">
        <Tabs defaultValue="infoboxes" className="w-full">
          <TabsList className="w-full">
            {Object.entries(feedback)
              .sort(([a], [b]) => a.localeCompare(b))
              .map(([category, categoryData]) => {
                const evaluationCount = categoryData.reduce(
                  (acc, section) =>
                    acc + section.requirement_evaluations.length,
                  0
                );

                return (
                  <TabsTrigger
                    key={category}
                    value={category.toLowerCase()}
                    className="flex items-center gap-2"
                  >
                    {category}
                    <Badge
                      variant="secondary"
                      className="h-5 w-5 flex items-center justify-center rounded-full"
                    >
                      {evaluationCount}
                    </Badge>
                  </TabsTrigger>
                );
              })}
          </TabsList>

          {Object.entries(feedback).map(([category, categoryData]) => (
            <TabsContent key={category} value={category.toLowerCase()}>
              <ScrollArea className="h-[calc(100vh-300px)] min-h-[400px] max-h-[600px] pr-4">
                {categoryData.map((section, sectionIndex) => (
                  <div key={sectionIndex} className="mb-6">
                    {section.meta_notes && (
                      <Alert className="mb-4">
                        <Info className="h-4 w-4" />
                        <AlertTitle>Meta Notes</AlertTitle>
                        <AlertDescription>
                          {section.meta_notes}
                        </AlertDescription>
                      </Alert>
                    )}

                    {section.requirement_evaluations.length > 0 && (
                      <div className="mb-4">
                        <Alert>
                          <AlertCircle className="h-4 w-4" />
                          <AlertTitle>Category Score</AlertTitle>
                          <AlertDescription className="mt-2">
                            <Progress
                              value={
                                calculateCategoryScore(
                                  category,
                                  section.requirement_evaluations
                                ) * 100
                              }
                              className="h-2"
                            />
                            <span className="text-sm text-gray-500 mt-1 block">
                              {(
                                calculateCategoryScore(
                                  category,
                                  section.requirement_evaluations
                                ) * 100
                              ).toFixed(1)}
                              % compliance
                            </span>
                          </AlertDescription>
                        </Alert>
                      </div>
                    )}

                    <Accordion type="single" collapsible className="w-full">
                      {section.requirement_evaluations.map((req, index) => (
                        <AccordionItem
                          key={index}
                          value={`item-${index}`}
                          className={
                            selectedRequirements.has(req.requirement_id)
                              ? "ring-2 ring-blue-500"
                              : ""
                          }
                          onClick={() =>
                            onRequirementSelect(req.requirement_id, category)
                          }
                        >
                          <AccordionTrigger className="hover:no-underline">
                            <div className="flex items-center gap-2">
                              {req.score === 1.0 ? (
                                <CheckCircle className="h-4 w-4 text-green-500" />
                              ) : req.score === 0.0 ? (
                                <AlertCircle className="h-4 w-4 text-red-500" />
                              ) : (
                                <Info className="h-4 w-4 text-yellow-500" />
                              )}
                              <span>Requirement {req.requirement_id}</span>
                              <Badge variant={getScoreBadgeVariant(req.score)}>
                                {(req.score * 100).toFixed(0)}%
                              </Badge>
                              <Badge variant="outline">
                                Confidence: {(req.confidence * 100).toFixed(0)}%
                              </Badge>
                            </div>
                          </AccordionTrigger>
                          <AccordionContent>
                            <div className="space-y-4 p-4">
                              <div className="space-y-2">
                                <h4 className="font-medium">Applicability</h4>
                                <p className="text-sm text-gray-600">
                                  {req.applicability_reasoning}
                                </p>
                              </div>

                              <div className="space-y-2">
                                <h4 className="font-medium">Evidence</h4>
                                <p className="text-sm text-gray-600">
                                  {req.evidence}
                                </p>
                              </div>

                              <div className="space-y-2">
                                <h4 className="font-medium">Reasoning</h4>
                                <p className="text-sm text-gray-600">
                                  {req.reasoning}
                                </p>
                              </div>

                              {req.overlap_notes &&
                                req.overlap_notes !== "N/A" && (
                                  <div className="space-y-2">
                                    <h4 className="font-medium">
                                      Overlap Notes
                                    </h4>
                                    <p className="text-sm text-gray-600">
                                      {req.overlap_notes}
                                    </p>
                                  </div>
                                )}
                            </div>
                          </AccordionContent>
                        </AccordionItem>
                      ))}
                    </Accordion>
                  </div>
                ))}
              </ScrollArea>
            </TabsContent>
          ))}
        </Tabs>
      </CardContent>
    </Card>
  );
};

================
File: lib/data.ts
================
import { RequirementsIndex } from "./types";

export const requirementsData: RequirementsIndex = {
  groups: {
    Content: {
      description:
        "Requirements related to the substantive content of the articles.",
      requirements: [
        {
          id: "R1",
          description:
            "An article should start with a clear definition in the lead section.",
          reference:
            "The first sentence of the lead should define what the scope of the article is.",
          category: "Content",
          classification: "Imperative Standards",
          where: "Lead section",
          when: "Always applicable.",
        },
        {
          id: "R2",
          description:
            "For genes/proteins with a human ortholog, the lead should specify the protein and gene.",
          reference:
            "\"For genes/proteins in which a human ortholog exists, 'recommended UniProt name' is a protein that in humans is encoded by the 'approved HUGO gene symbol' gene.\"",
          category: "Content",
          classification: "Contextual Considerations",
          where: "Lead section",
          when: "Applicable for gene/protein articles with human orthologs.",
        },
        {
          id: "R1",
          description:
            "Articles about related proteins may be cross linked by including one or more navigation boxes.",
          reference:
            "Articles about related proteins may be cross linked by including one or more [[WP:NAVBOX|navigation boxes]] as appropriate.",
          category: "Content",
          classification: "Best Practices",
          where: "Content section",
          when: "When articles are about related proteins.",
        },
        {
          id: "R1",
          description:
            "List diseases or conditions that are a result of a mutation in the gene or a deficiency or excess of the expressed protein.",
          reference:
            "List diseases or conditions that are a result of a mutation in the gene or a deficiency or excess of the expressed protein.",
          category: "Content",
          classification: "Imperative Standards",
          where: "Clinical significance section",
          when: "Always applicable for gene/protein articles.",
        },
        {
          id: "R1",
          description:
            "Do not mention the research group or institution directly in the text of the article.",
          reference:
            "In general, it is not appropriate to mention the research group or institution that conducted a study directly in the text of the article.",
          category: "Content",
          classification: "Imperative Standards",
          where: "Content section",
          when: "Always applicable.",
        },
        {
          id: "R2",
          description:
            "List the names of those who made key discoveries concerning the gene or protein.",
          reference:
            "However it is appropriate to list the names of those who made key discoveries concerning the gene or protein in this section (e.g., the scientist or group that originally cloned the gene, determined its function, linked it to a disease, won a major award for the discovery, etc.).",
          category: "Content",
          classification: "Best Practices",
          where: "History/Discovery section",
          when: "Applicable when discussing key discoveries.",
        },
        {
          id: "R2",
          description:
            "Gene and protein articles should be categorized appropriately.",
          reference:
            "Categories or subcategories that may be appropriate for gene and protein articles include: [[:Category:Proteins]], [[:Category:Enzymes by function]], [[:Category:Genes by human chromosome]].",
          category: "Content",
          classification: "Best Practices",
          where: "Article metadata",
          when: "Applicable to gene and protein articles.",
        },
        {
          id: "R1",
          description:
            "Specific information about the gene should be included, such as its location on the human chromosome and regulation.",
          reference:
            "Specific information about the gene (on which human chromosome it is located, regulation, etc.).",
          category: "Content",
          classification: "Imperative Standards",
          where: "Content section",
          when: "Always applicable for gene articles.",
        },
        {
          id: "R2",
          description:
            "Basic information already contained in the infobox should not be unnecessarily repeated in the content section unless especially notable.",
          reference:
            "Much of this basic information may already contained in the infobox and should not be unnecessarily repeated in this section unless especially notable.",
          category: "Content",
          classification: "Best Practices",
          where: "Content section",
          when: "Applicable when information is already in the infobox.",
        },
        {
          id: "R1",
          description:
            "The scope of a gene/protein article should include the human gene/protein and orthologs in other species.",
          reference:
            "The scope of a gene/protein article is the human gene/protein (including all splice variants derived from that gene) as well as orthologs (as listed in HomoloGene) that exist in other species.",
          category: "Content",
          classification: "Imperative Standards",
          where: "Throughout the article",
          when: "Always applicable for gene/protein articles.",
        },
        {
          id: "R2",
          description:
            "If there are paralogs in humans, a gene family article should be created in addition to gene-specific articles.",
          reference:
            "If there are paralogs in humans (and by extension other species), then a gene family article in addition to the gene specific articles would be appropriate.",
          category: "Content",
          classification: "Contextual Considerations",
          where: "Content section",
          when: "Applicable when paralogs exist.",
        },
        {
          id: "R3",
          description:
            "Do not hype a study by listing the names, credentials, institutions, or other qualifications of their authors.",
          reference:
            'In general, do not hype a study by listing the names, credentials, institutions, or other "qualifications" of their authors.',
          category: "Content",
          classification: "Imperative Standards",
          where: "Throughout the article",
          when: "Always applicable.",
        },
        {
          id: "R4",
          description:
            "Article prose should focus on what a cited study says about the structure, function, clinical significance, etc. of the gene or protein.",
          reference:
            "Article prose should focus on what a cited study says about the structure, function, clinical significance, etc. of the gene or protein.",
          category: "Content",
          classification: "Imperative Standards",
          where: "Content section",
          when: "Always applicable.",
        },
        {
          id: "R5",
          description:
            "Notable contributions and who made the discovery should be mentioned in the discovery/history section.",
          reference:
            "Particularly notable contributions along with who made the discovery however should be mentioned in the discovery/history section.",
          category: "Content",
          classification: "Best Practices",
          where: "Discovery/history section",
          when: "When notable contributions are relevant.",
        },
        {
          id: "R1",
          description:
            "An article should start with a clear definition in the lead section.",
          reference:
            "The first sentence of the lead should define what the scope of the article is.",
          category: "Content",
          classification: "Imperative Standards",
          where: "Lead section",
          when: "Always applicable.",
        },
        {
          id: "R2",
          description: "Describe the function of the transcribed protein.",
          reference: "Describe the function of the transcribed protein.",
          category: "Content",
          classification: "Imperative Standards",
          where: "Function section",
          when: "Applicable for gene/protein articles.",
        },
        {
          id: "R1",
          description:
            "An article should start with a clear definition in the lead section.",
          reference:
            "The first sentence of the lead should define what the scope of the article is.",
          category: "Content",
          classification: "Imperative Standards",
          where: "Lead section",
          when: "Always applicable.",
        },
        {
          id: "R2",
          description:
            "The 'Interactions' section should list proteins that the subject protein is known to interact with.",
          reference:
            "Optional section that lists proteins that the protein that is the subject of the article is known to interact with.",
          category: "Content",
          classification: "Flexible Guidelines",
          where: "Interactions section",
          when: "Applicable when interaction data is available.",
        },
        {
          id: "R1",
          description:
            "Use the recommended UniProt protein name as the article name if it is relatively short.",
          reference:
            "If relatively short, the recommended UniProt protein name should be used as the article name.",
          category: "Content",
          classification: "Best Practices",
          where: "Article title",
          when: "Applicable when the UniProt protein name is short.",
        },
        {
          id: "R2",
          description:
            "Use a widely used protein acronym or the official HUGO gene symbol if the protein name is verbose.",
          reference:
            "If the protein name is verbose, either a widely used protein acronym or the official HUGO gene symbol, followed by '(gene)' if necessary to disambiguate.",
          category: "Content",
          classification: "Best Practices",
          where: "Article title",
          when: "Applicable when the protein name is verbose.",
        },
        {
          id: "R3",
          description:
            "Enumerate different members of a protein family with a dash followed by an Arabic number.",
          reference:
            "The different members should be enumerated with a dash '-' followed by an Arabic number, e.g. 'desmoglein-1', 'desmoglein-2', etc.",
          category: "Content",
          classification: "Imperative Standards",
          where: "Throughout the article",
          when: "Applicable for proteins grouped into a family based on homology or shared function.",
        },
        {
          id: "R4",
          description:
            "Include the taxon in the title for viral protein articles.",
          reference:
            "If the article is about a viral protein, it is recommended to include the taxon in the title.",
          category: "Content",
          classification: "Best Practices",
          where: "Article title",
          when: "Applicable for articles about viral proteins.",
        },
        {
          id: "R5",
          description:
            "A parenthesized term added to disambiguate common symbols does not constitute unnecessary disambiguation.",
          reference:
            "A parenthesized term added to disambiguate common symbols does not constitute unnecessary disambiguation even when it is the only article with such a name.",
          category: "Content",
          classification: "Flexible Guidelines",
          where: "Article title",
          when: "Applicable when disambiguating common symbols.",
        },
        {
          id: "R1",
          description:
            "Specific information about the protein should not be unnecessarily repeated unless especially notable.",
          reference:
            "Specific information about the protein (splice variants, post translational modifications, etc.). Again, much of this basic information may already contained in the infobox and should not be unnecessarily repeated unless especially notable.",
          category: "Content",
          classification: "Best Practices",
          where: "Content section",
          when: "When detailing protein information.",
        },
        {
          id: "R1",
          description:
            "An article should start with a clear definition in the lead section.",
          reference:
            "The first sentence of the lead should define what the scope of the article is.",
          category: "Content",
          classification: "Imperative Standards",
          where: "Lead section",
          when: "Always applicable.",
        },
        {
          id: "R2",
          description:
            "The article should provide a comprehensive overview of the gene or protein.",
          reference:
            "The article should provide a comprehensive overview of the gene or protein, including its function, structure, and significance.",
          category: "Content",
          classification: "Best Practices",
          where: "Throughout the article",
          when: "Applicable for all gene/protein articles.",
        },
        {
          id: "R1",
          description:
            "Optional section that concisely describes species, tissue, and subcellular distribution of the gene.",
          reference:
            "Optional section that concisely describes what species this gene is expressed (e.g., wide species distribution, bacteria, fungi, vertebrates, mammals, etc.), what tissue the protein is expressed, and which subcellular compartments or organelles the protein is found (excreted, cytoplasm, nucleus, mitochondria, cell membrane).",
          category: "Content",
          classification: "Flexible Guidelines",
          where: "Species, tissue, and subcellular distribution section",
          when: "Applicable when discussing gene/protein expression.",
        },
        {
          id: "R1",
          description:
            "An article should start with a clear definition in the lead section.",
          reference:
            "The first sentence of the lead should define what the scope of the article is.",
          category: "Content",
          classification: "Imperative Standards",
          where: "Lead section",
          when: "Always applicable.",
        },
        {
          id: "R2",
          description:
            "The lead section should summarize the most important points of the article.",
          reference:
            "The lead should summarize the most important points, including the subject's significance, and establish context.",
          category: "Content",
          classification: "Imperative Standards",
          where: "Lead section",
          when: "Always applicable.",
        },
        {
          id: "R3",
          description: "Articles should be written in a neutral point of view.",
          reference:
            "All Wikipedia articles and other encyclopedic content must be written from a neutral point of view.",
          category: "Content",
          classification: "Imperative Standards",
          where: "Throughout the article",
          when: "Always applicable.",
        },
        {
          id: "R4",
          description:
            "Avoid using jargon and technical terms without explanation.",
          reference:
            "Avoid using jargon and technical terms without explanation, as Wikipedia is for a general audience.",
          category: "Content",
          classification: "Best Practices",
          where: "Throughout the article",
          when: "Applicable when technical terms are used.",
        },
        {
          id: "R5",
          description:
            "Ensure that all statements are verifiable with reliable sources.",
          reference:
            "All material in Wikipedia mainspace, including everything in articles, lists, and captions, must be verifiable.",
          category: "Content",
          classification: "Imperative Standards",
          where: "Throughout the article",
          when: "Always applicable.",
        },
        {
          id: "R1",
          description:
            "The Wikipedia article should be linked to a Wikidata item of the entity first mentioned in the first sentence of the lead section.",
          reference:
            "The Wikipedia article should be linked to a Wikidata item of the entity first mentioned in the first sentence of the lead section, which should be written as defined in [[WP:MCBMOSSECTIONS]].",
          category: "Content",
          classification: "Imperative Standards",
          where: "Lead section",
          when: "Always applicable for gene/protein articles.",
        },
        {
          id: "R1",
          description:
            "An article should start with a clear definition in the lead section.",
          reference:
            "The first sentence of the lead should define what the scope of the article is.",
          category: "Content",
          classification: "Imperative Standards",
          where: "Lead section",
          when: "Always applicable.",
        },
        {
          id: "R2",
          description:
            "The lead section should summarize the most important points of the article.",
          reference:
            "The lead should summarize the most important points of the article.",
          category: "Content",
          classification: "Imperative Standards",
          where: "Lead section",
          when: "Always applicable.",
        },
        {
          id: "R3",
          description: "The article should provide context for the topic.",
          reference:
            "Provide context for the topic so that it is understandable to a general audience.",
          category: "Content",
          classification: "Best Practices",
          where: "Throughout the article",
          when: "Always applicable.",
        },
      ],
    },
    "Language Usage": {
      description:
        "Guidelines for the appropriate use of language, including gene nomenclature and abbreviations.",
      requirements: [
        {
          id: "R1",
          description:
            "Gene abbreviations should be according to HUGO Gene Nomenclature Committee guidelines and written in italic font style.",
          reference:
            "The abbreviations of genes are according to HUGO Gene Nomenclature Committee and written in italic font style.",
          category: "Language Usage",
          classification: "Imperative Standards",
          where: "Throughout the article",
          when: "Always applicable.",
        },
        {
          id: "R2",
          description:
            "It is recommended to use gene abbreviations instead of the full name.",
          reference:
            "It is recommended that abbreviations instead of the full name are used.",
          category: "Language Usage",
          classification: "Best Practices",
          where: "Throughout the article",
          when: "Always applicable.",
        },
        {
          id: "R3",
          description: "Human gene names should be written in all capitals.",
          reference:
            "Human gene names are written in capitals, for example ALDOA, INS, etc.",
          category: "Language Usage",
          classification: "Imperative Standards",
          where: "Throughout the article",
          when: "Applicable for human genes only.",
        },
        {
          id: "R4",
          description:
            "For orthologs of human genes in other species, only the initial letter is capitalised.",
          reference:
            "For orthologs of human genes in other species, only the initial letter is capitalised, for example mouse Aldoa, bovine Ins, etc.",
          category: "Language Usage",
          classification: "Imperative Standards",
          where: "Throughout the article",
          when: "Applicable for non-human species.",
        },
        {
          id: "R5",
          description:
            "Use 'the ALDOA gene is regulated...' or 'ALDOA is regulated...' instead of 'the gene ALDOA is regulated'.",
          reference:
            "The following usages of gene symbols are recommended: 'the ALDOA gene is regulated...', 'ALDOA is regulated...', while the following is not recommended: 'the gene ALDOA is regulated' since it is redundant.",
          category: "Language Usage",
          classification: "Best Practices",
          where: "Throughout the article",
          when: "Always applicable.",
        },
        {
          id: "R6",
          description:
            "Use 'the rat gene for Aldoa is regulated...' for non-human genes.",
          reference:
            "The following usages of gene symbols are recommended: 'the rat gene for Aldoa is regulated...'.",
          category: "Language Usage",
          classification: "Best Practices",
          where: "Throughout the article",
          when: "Applicable for non-human species.",
        },
        {
          id: "R3",
          description: "Human gene names should be written in all capitals.",
          reference:
            "Human gene names are written in capitals, for example ALDOA, INS, etc.",
          category: "Language Usage",
          classification: "Imperative Standards",
          where: "Throughout the article",
          when: "Applicable for human genes only.",
        },
        {
          id: "R3",
          description: "Human gene names should be written in all capitals.",
          reference:
            "Human gene names are written in capitals, for example ALDOA, INS, etc.",
          category: "Language Usage",
          classification: "Imperative Standards",
          where: "Throughout the article",
          when: "Applicable for human genes only.",
        },
        {
          id: "R3",
          description: "Human gene names should be written in all capitals.",
          reference:
            "Human gene names are written in capitals, for example ALDOA, INS, etc.",
          category: "Language Usage",
          classification: "Imperative Standards",
          where: "Throughout the article",
          when: "Applicable for human genes only.",
        },
        {
          id: "R4",
          description:
            "Protein names should be written with the first letter capitalized.",
          reference:
            "Protein names are written with the first letter capitalized, for example Aldolase A, Insulin, etc.",
          category: "Language Usage",
          classification: "Imperative Standards",
          where: "Throughout the article",
          when: "Applicable for protein names.",
        },
        {
          id: "R9",
          description:
            "Use American or British English consistently throughout the article.",
          reference:
            "Articles should use either American or British English consistently, unless the subject has a strong national tie to a particular English-speaking nation.",
          category: "Language Usage",
          classification: "Best Practices",
          where: "Throughout the article",
          when: "Always applicable.",
        },
        {
          id: "R10",
          description: "Avoid using first-person language.",
          reference:
            "First-person language should be avoided to maintain an encyclopedic tone.",
          category: "Language Usage",
          classification: "Imperative Standards",
          where: "Throughout the article",
          when: "Always applicable.",
        },
        {
          id: "R6",
          description: "Human gene names should be written in all capitals.",
          reference:
            "Human gene names are written in capitals, for example ALDOA, INS, etc.",
          category: "Language Usage",
          classification: "Imperative Standards",
          where: "Throughout the article",
          when: "Applicable for human genes only.",
        },
        {
          id: "R7",
          description: "Use scientific names in italics.",
          reference: "Scientific names should be italicized.",
          category: "Language Usage",
          classification: "Imperative Standards",
          where: "Throughout the article",
          when: "When mentioning scientific names.",
        },
      ],
    },
    Structure: {
      description: "Guidelines on how to structure the article sections.",
      requirements: [
        {
          id: "R3",
          description:
            "Include a History/Discovery section for articles about genes or proteins.",
          reference:
            "Example articles of what such an organization may look like are: [[Protein C]], [[Gonadotropin-releasing hormone]] or [[Rubisco]].",
          category: "Structure",
          classification: "Best Practices",
          where: "History/Discovery section",
          when: "Applicable for gene/protein articles.",
        },
        {
          id: "R1",
          description:
            "Every Wikipedia article should be added to at least one category.",
          reference:
            "Every Wikipedia article should be added to at least one [[WP:CATEGORY|category]].",
          category: "Structure",
          classification: "Imperative Standards",
          where: "Article metadata",
          when: "Always applicable.",
        },
        {
          id: "R7",
          description: "Articles should follow a standard structure.",
          reference:
            "Articles should follow a standard structure with sections such as lead, function, and infobox.",
          category: "Structure",
          classification: "Imperative Standards",
          where: "Throughout the article",
          when: "Always applicable.",
        },
        {
          id: "R6",
          description:
            "Articles should follow a logical structure with clear sections.",
          reference:
            "The article should be organized into sections that follow a logical order.",
          category: "Structure",
          classification: "Best Practices",
          where: "Throughout the article",
          when: "Always applicable.",
        },
        {
          id: "R14",
          description: "Articles should have a clear and logical structure.",
          reference:
            "Articles should have a clear and logical structure, with sections and subsections used to organize content.",
          category: "Structure",
          classification: "Imperative Standards",
          where: "Throughout the article",
          when: "Always applicable.",
        },
        {
          id: "R15",
          description:
            "The 'See also' section should include links to related articles.",
          reference:
            "The 'See also' section should include links to related articles that provide additional context or information.",
          category: "Structure",
          classification: "Best Practices",
          where: "End of the article",
          when: "Applicable when related articles exist.",
        },
        {
          id: "R10",
          description: "Articles should have a clear and logical structure.",
          reference:
            "Articles should be structured in a clear and logical manner.",
          category: "Structure",
          classification: "Imperative Standards",
          where: "Throughout the article",
          when: "Always applicable.",
        },
        {
          id: "R11",
          description: "Use subheadings to organize content within sections.",
          reference:
            "Subheadings should be used to organize content within sections.",
          category: "Structure",
          classification: "Best Practices",
          where: "Content sections",
          when: "When sections contain multiple topics.",
        },
      ],
    },
    "Images and Diagrams": {
      description: "Guidelines for the use of images and diagrams in articles.",
      requirements: [
        {
          id: "R1",
          description:
            "Diagrams should adhere to a standard format where possible.",
          reference:
            "Where possible, diagrams should keep to a standard format.",
          category: "Formatting",
          classification: "Best Practices",
          where: "Throughout the article",
          when: "Whenever diagrams are used.",
        },
        {
          id: "R2",
          description:
            "Suggest expansions to the standardized formatting if the diagram guide is insufficient.",
          reference:
            "If the diagram guide does not give sufficient guidance on the style for the images in an article, consider suggesting expansions to the standardised formatting.",
          category: "Supplementary Information",
          classification: "Flexible Guidelines",
          where: "Discussion pages or project pages",
          when: "When existing guidelines are insufficient.",
        },
      ],
    },
    Formatting: {
      description: "Requirements related to the formatting of the articles.",
      requirements: [
        {
          id: "R4",
          description: "Use italics for gene symbols.",
          reference: "Gene symbols should be italicized.",
          category: "Formatting",
          classification: "Imperative Standards",
          where: "Throughout the article",
          when: "Applicable for gene symbols.",
        },
        {
          id: "R4",
          description: "Use consistent formatting for section headers.",
          reference:
            "Section headers should follow a consistent format throughout the article.",
          category: "Formatting",
          classification: "Best Practices",
          where: "Throughout the article",
          when: "Always applicable.",
        },
        {
          id: "R5",
          description:
            "Use the standard infobox template for gene/protein articles.",
          reference:
            "Use the standard infobox template for gene/protein articles to ensure consistency.",
          category: "Formatting",
          classification: "Imperative Standards",
          where: "Infobox",
          when: "Always applicable.",
        },
        {
          id: "R6",
          description: "Sections should be organized in a logical order.",
          reference:
            "Sections should be organized in a logical order, typically starting with an introduction, followed by sections on structure, function, and clinical significance.",
          category: "Formatting",
          classification: "Best Practices",
          where: "Throughout the article",
          when: "Applicable for all gene/protein articles.",
        },
        {
          id: "R6",
          description:
            "Use consistent formatting for headings and subheadings.",
          reference:
            "Headings and subheadings should be used to organize content and should follow a consistent format.",
          category: "Formatting",
          classification: "Best Practices",
          where: "Throughout the article",
          when: "Always applicable.",
        },
        {
          id: "R7",
          description: "Use bullet points for lists where appropriate.",
          reference:
            "Bullet points should be used for lists where appropriate to improve readability.",
          category: "Formatting",
          classification: "Best Practices",
          where: "Throughout the article",
          when: "Applicable when listing items.",
        },
        {
          id: "R8",
          description:
            "Images should be placed in a way that enhances the text.",
          reference:
            "Images should be placed in a way that enhances the text and does not disrupt the flow of reading.",
          category: "Formatting",
          classification: "Best Practices",
          where: "Throughout the article",
          when: "Applicable when images are used.",
        },
        {
          id: "R4",
          description: "Use consistent formatting for section headings.",
          reference:
            "Section headings should be consistent in style and formatting.",
          category: "Formatting",
          classification: "Imperative Standards",
          where: "Throughout the article",
          when: "Always applicable.",
        },
        {
          id: "R5",
          description: "Use bullet points for lists where appropriate.",
          reference:
            "Bullet points should be used for lists where appropriate.",
          category: "Formatting",
          classification: "Best Practices",
          where: "Content sections",
          when: "When listing items or points.",
        },
      ],
    },
    Citations: {
      description: "Guidelines for citing sources in the articles.",
      requirements: [
        {
          id: "R5",
          description: "All statements should be supported by citations.",
          reference: "All statements should be supported by reliable sources.",
          category: "Citations",
          classification: "Imperative Standards",
          where: "Throughout the article",
          when: "Always applicable.",
        },
        {
          id: "R5",
          description:
            "All statements should be supported by reliable sources.",
          reference:
            "Statements in the article should be backed by citations from reliable sources.",
          category: "Citations",
          classification: "Imperative Standards",
          where: "Throughout the article",
          when: "Always applicable.",
        },
        {
          id: "R7",
          description:
            "All statements should be supported by reliable sources.",
          reference:
            "All statements should be supported by reliable sources to ensure the accuracy and credibility of the article.",
          category: "Citations",
          classification: "Imperative Standards",
          where: "Throughout the article",
          when: "Always applicable.",
        },
        {
          id: "R8",
          description: "Use inline citations for specific claims.",
          reference:
            "Use inline citations for specific claims to provide direct evidence for the information presented.",
          category: "Citations",
          classification: "Best Practices",
          where: "Throughout the article",
          when: "Applicable for specific claims and data.",
        },
        {
          id: "R11",
          description: "Citations should be provided for all direct quotes.",
          reference:
            "Citations must be provided for all direct quotes to ensure verifiability.",
          category: "Citations",
          classification: "Imperative Standards",
          where: "Throughout the article",
          when: "Applicable when direct quotes are used.",
        },
        {
          id: "R12",
          description:
            "Use inline citations for statements that are challenged or likely to be challenged.",
          reference:
            "Inline citations should be used for statements that are challenged or likely to be challenged.",
          category: "Citations",
          classification: "Imperative Standards",
          where: "Throughout the article",
          when: "Applicable when statements are challenged.",
        },
        {
          id: "R8",
          description:
            "All statements should be supported by reliable sources.",
          reference: "Statements should be supported by reliable sources.",
          category: "Citations",
          classification: "Imperative Standards",
          where: "Throughout the article",
          when: "Always applicable.",
        },
        {
          id: "R9",
          description: "Use inline citations for direct quotes.",
          reference: "Inline citations should be used for direct quotes.",
          category: "Citations",
          classification: "Imperative Standards",
          where: "Throughout the article",
          when: "When using direct quotes.",
        },
        {
          id: "R1",
          description:
            "MCB articles should be relatively dense with inline citations.",
          reference:
            "MCB articles should be relatively dense with inline citations, using either <nowiki><ref></nowiki> tags (footnotes) or parenthetical citations.",
          category: "Citations",
          classification: "Imperative Standards",
          where: "Throughout the article",
          when: "Always applicable.",
        },
        {
          id: "R2",
          description:
            "It is not acceptable to write substantial amounts of prose and then add your textbook to the 'References' section as a non-specific or general reference.",
          reference:
            "It is not acceptable to write substantial amounts of prose and then add your textbook to the 'References' section as a non-specific or general reference.",
          category: "Citations",
          classification: "Imperative Standards",
          where: "References section",
          when: "Always applicable.",
        },
        {
          id: "R3",
          description:
            "The format of citations should be consistent within any one article.",
          reference:
            "There is no standard for formatting citations on Wikipedia, but the format should be consistent within any one article.",
          category: "Citations",
          classification: "Imperative Standards",
          where: "Throughout the article",
          when: "Always applicable.",
        },
        {
          id: "R4",
          description:
            "Some editors prefer to expand the abbreviated journal name; others prefer concise standard abbreviations.",
          reference:
            "Some editors prefer to expand the abbreviated journal name; others prefer concise standard abbreviations.",
          category: "Citations",
          classification: "Flexible Guidelines",
          where: "References section",
          when: "Based on editor preference.",
        },
        {
          id: "R5",
          description:
            "Abstracts of most MCB related journals are freely available at PubMed.",
          reference:
            "Abstracts of most MCB related journals are freely available at PubMed, which includes a means of searching the MEDLINE database.",
          category: "Citations",
          classification: "Flexible Guidelines",
          where: "References section",
          when: "When citing MCB related journals.",
        },
        {
          id: "R6",
          description:
            "The easiest way to populate the journal and book citation templates is to use Diberri's template-filling web site or the Universal reference formatter.",
          reference:
            "The easiest way to populate the journal and book citation templates is to use Diberri's template-filling web site or the Universal reference formatter.",
          category: "Citations",
          classification: "Best Practices",
          where: "References section",
          when: "When adding citations.",
        },
        {
          id: "R7",
          description:
            "Multiple references to the same source citation can be achieved by ensuring the inline reference is named uniquely.",
          reference:
            "Multiple references to the same source citation can be achieved by ensuring the inline reference is named uniquely.",
          category: "Citations",
          classification: "Best Practices",
          where: "Throughout the article",
          when: "When citing the same source multiple times.",
        },
        {
          id: "R8",
          description:
            "In addition to the standard citation text, it is useful to supply hyperlinks.",
          reference:
            "In addition to the standard citation text, it is useful to supply hyperlinks.",
          category: "Citations",
          classification: "Best Practices",
          where: "References section",
          when: "When possible.",
        },
        {
          id: "R9",
          description:
            "If the journal abstract is available on PubMed, add a link by typing PMID xxxxxxxxx.",
          reference:
            "If the journal abstract is available on PubMed, add a link by typing PMID xxxxxxxxx.",
          category: "Citations",
          classification: "Best Practices",
          where: "References section",
          when: "When citing journal abstracts available on PubMed.",
        },
        {
          id: "R10",
          description: "If the article has a DOI, use the doi template.",
          reference: "If the article has a DOI, use the doi template.",
          category: "Citations",
          classification: "Best Practices",
          where: "References section",
          when: "When a DOI is available.",
        },
        {
          id: "R11",
          description:
            "If the article's full text is freely available online, supply a URL to this text by hyperlinking the article title in the citation.",
          reference:
            "If and only if the article's full text is freely available online, supply a URL to this text by hyperlinking the article title in the citation.",
          category: "Citations",
          classification: "Best Practices",
          where: "References section",
          when: "When the full text is freely available online.",
        },
        {
          id: "R12",
          description:
            "When the source text is available in both HTML and PDF, the former should be preferred.",
          reference:
            "When the source text is available in both HTML and PDF, the former should be preferred as it is compatible with a larger range of browsers.",
          category: "Citations",
          classification: "Best Practices",
          where: "References section",
          when: "When both formats are available.",
        },
        {
          id: "R13",
          description:
            "Do not add a 'Retrieved on' date for convenience links to online editions of paper journals.",
          reference:
            "Do not add a 'Retrieved on' date for convenience links to online editions of paper journals.",
          category: "Citations",
          classification: "Imperative Standards",
          where: "References section",
          when: "When citing online editions of paper journals.",
        },
        {
          id: "R14",
          description:
            "Use citation templates such as Cite journal, Cite book, Cite web, Cite press release, and Cite news.",
          reference:
            "Others prefer to use citation templates such as Cite journal, Cite book, Cite web, Cite press release and Cite news.",
          category: "Citations",
          classification: "Best Practices",
          where: "References section",
          when: "When adding citations.",
        },
        {
          id: "R15",
          description:
            "Citations in the Vancouver format can be produced using the vauthors or veditors parameters.",
          reference:
            "Citations in the Vancouver format can be produced using the vauthors or veditors parameters.",
          category: "Citations",
          classification: "Best Practices",
          where: "References section",
          when: "When using Vancouver format.",
        },
        {
          id: "R16",
          description:
            "The Uniform Requirements for Manuscripts Submitted to Biomedical Journals citation guidelines list up to six authors, followed by 'et al.' if there are more than six.",
          reference:
            "The Uniform Requirements for Manuscripts Submitted to Biomedical Journals citation guidelines list up to six authors, followed by 'et al.' if there are more than six.",
          category: "Citations",
          classification: "Best Practices",
          where: "References section",
          when: "When citing sources with more than six authors.",
        },
      ],
    },
    Infoboxes: {
      description: "Guidelines for the use of infoboxes in articles.",
      requirements: [
        {
          id: "R6",
          description: "Include an infobox for gene/protein articles.",
          reference: "An infobox should be included for gene/protein articles.",
          category: "Infoboxes",
          classification: "Best Practices",
          where: "Lead section",
          when: "Applicable for gene/protein articles.",
        },
        {
          id: "R13",
          description:
            "Infoboxes should be used to summarize key facts about the subject.",
          reference:
            "Infoboxes should be used to summarize key facts about the subject in a consistent format.",
          category: "Infoboxes",
          classification: "Best Practices",
          where: "Top of the article",
          when: "Applicable when an infobox is relevant.",
        },
        {
          id: "R1",
          description:
            "Include one or more appropriate infoboxes at the top of each article.",
          reference:
            "One or more of the following infoboxes as appropriate should be included at the top of each article.",
          category: "Infoboxes",
          classification: "Imperative Standards",
          where: "Top of the article",
          when: "Always applicable.",
        },
        {
          id: "R2",
          description:
            "Use the Infobox GNF protein for genes/proteins with a human ortholog.",
          reference:
            "Infobox GNF protein: for genes/proteins for which an ortholog is present within the human genome.",
          category: "Infoboxes",
          classification: "Contextual Considerations",
          where: "Infobox section",
          when: "Applicable when an ortholog is present within the human genome.",
        },
        {
          id: "R3",
          description:
            "Use the Infobox protein for protein family articles discussing more than one protein.",
          reference:
            "Infobox protein: smaller box appropriate for protein family articles where more than one protein is discussed.",
          category: "Infoboxes",
          classification: "Contextual Considerations",
          where: "Infobox section",
          when: "Applicable for protein family articles.",
        },
        {
          id: "R4",
          description:
            "Use the Infobox nonhuman protein for proteins without a human ortholog.",
          reference:
            "Infobox nonhuman protein: for proteins without a human ortholog.",
          category: "Infoboxes",
          classification: "Contextual Considerations",
          where: "Infobox section",
          when: "Applicable for proteins without a human ortholog.",
        },
        {
          id: "R5",
          description:
            "Use the Infobox protein family for protein families listed in Pfam.",
          reference:
            "Infobox protein family: for protein families that are listed in Pfam.",
          category: "Infoboxes",
          classification: "Contextual Considerations",
          where: "Infobox section",
          when: "Applicable for protein families listed in Pfam.",
        },
        {
          id: "R6",
          description: "Use the Infobox rfam for RNA families listed in Rfam.",
          reference: "Infobox rfam: for RNA families that are listed in Rfam.",
          category: "Infoboxes",
          classification: "Contextual Considerations",
          where: "Infobox section",
          when: "Applicable for RNA families listed in Rfam.",
        },
        {
          id: "R7",
          description: "Use the Infobox enzyme for enzymes based on EC number.",
          reference: "Infobox enzyme: for enzymes based on EC number.",
          category: "Infoboxes",
          classification: "Contextual Considerations",
          where: "Infobox section",
          when: "Applicable for enzymes based on EC number.",
        },
        {
          id: "R8",
          description:
            "Add a corresponding enzyme infobox if there is only one human paralog assigned to an EC number.",
          reference:
            "If there is only one human paralog assigned to a given EC number, then in addition to a protein infobox, it may be appropriate to also add the corresponding enzyme infobox.",
          category: "Infoboxes",
          classification: "Contextual Considerations",
          where: "Infobox section",
          when: "Applicable when there is only one human paralog assigned to an EC number.",
        },
        {
          id: "R9",
          description:
            "Include a protein family infobox if there is only one human paralog assigned to a Pfam family.",
          reference:
            "If there is only one human paralog that has been assigned to Pfam family, then including a protein family infobox may also be appropriate.",
          category: "Infoboxes",
          classification: "Contextual Considerations",
          where: "Infobox section",
          when: "Applicable when there is only one human paralog assigned to a Pfam family.",
        },
        {
          id: "R10",
          description:
            "Place less useful infoboxes in a section at the end if a large number of infoboxes apply.",
          reference:
            "There exist some cases where a large number of infoboxes may apply to an article. You may put less useful ones in a section at the end, laid side-by-side with a table.",
          category: "Infoboxes",
          classification: "Flexible Guidelines",
          where: "End of the article",
          when: "Applicable when a large number of infoboxes apply.",
        },
        {
          id: "R11",
          description:
            "Avoid collapsing or horizontally scrolling infobox tables unless necessary.",
          reference:
            "Collapsing or horizontally scrolling the said table is doubtful, as MOS:COLLAPSE may or may not apply depending on how 'extraneous' the boxes are.",
          category: "Infoboxes",
          classification: "Best Practices",
          where: "Infobox section",
          when: "Applicable when considering the layout of infoboxes.",
        },
      ],
    },
  },
} as const;

================
File: lib/json.ts
================
import fs from "fs/promises";
import { marked } from "marked";
import { Section } from "./types";
import { processRefs } from "./utils";

export async function getData(path: string): Promise<{ data: any | null }> {
  try {
    const jsonData = await fs.readFile(
      "lib/data/results/" + path + ".json",
      "utf8"
    );

    return { data: JSON.parse(jsonData) };
  } catch (error) {
    if ((error as NodeJS.ErrnoException).code === "ENOENT") {
      return { data: null };
    }
    throw error;
  }
}

export async function parseWikicrow(
  path: string
): Promise<{ data: Section[] }> {
  const markdownText = await fs.readFile(
    "lib/data/articles/" + path + ".md",
    "utf-8"
  );

  // Use marked to parse the markdown
  const tokens = marked.lexer(markdownText);

  const structuredData: Section[] = [];
  let currentHierarchy: string[] = [];
  let currentSection: Section | null = null;

  for (const token of tokens) {
    if (token.type === "heading") {
      if (currentSection) {
        structuredData.push(currentSection);
      }

      const level = token.depth;
      const title = token.text;

      currentHierarchy = [...currentHierarchy.slice(0, level - 1), title];
      currentSection = {
        title,
        content: "",
        hierarchy: currentHierarchy.join(" > "),
      };
    } else if (token.type === "paragraph" || token.type === "list") {
      if (currentSection) {
        currentSection.content += marked.parser([token]) + " ";
      }
    }
  }

  if (currentSection) {
    structuredData.push(currentSection);
  }

  console.log(structuredData);

  return { data: structuredData };

  // ... rest of the function (processing references, etc.) ...
}

export async function parseeWikicrow(
  path: string
): Promise<{ data: Section[] }> {
  const markdownText = await fs.readFile(
    "lib/data/articles/" + path + ".md",
    "utf-8"
  );
  const lines = markdownText.split("\n");

  const rootTitle = lines[0].replace(/^#+\s*/, "").trim();
  const sectionPattern = /^(#+)\s*(.*?)\s*$/;

  const structuredData: Section[] = [];
  let currentHierarchy = [rootTitle];
  let currentTitle = rootTitle;
  let currentContent = "";

  // Start with the root section
  structuredData.push({
    title: currentTitle,
    content: "",
    hierarchy: currentHierarchy.join(" > "),
  });

  for (const line of lines.slice(1)) {
    // Skip the first line as it's the root title
    const sectionMatch = line.match(sectionPattern);

    if (sectionMatch) {
      // If there's an ongoing section, save the current one
      if (currentContent || currentHierarchy.length > 1) {
        // Only append if there's content or it's not top-level
        structuredData.push({
          title: currentTitle,
          content: currentContent.trim(),
          hierarchy: currentHierarchy.join(" > "),
        });
      }

      // New section detected, update the current title, hierarchy, and content
      const level = sectionMatch[1].length; // Number of '#' indicates the level
      currentTitle = sectionMatch[2].trim();

      // Update hierarchy based on the level
      currentHierarchy = [
        ...currentHierarchy.slice(0, level - 1),
        currentTitle,
      ];
      currentContent = "";
    } else {
      currentContent += line.trim() + " ";
    }
  }

  // Append the last section if it has content or is not top-level
  if (currentContent || currentHierarchy.length > 1) {
    structuredData.push({
      title: currentTitle,
      content: currentContent.trim(),
      hierarchy: currentHierarchy.join(" > "),
    });
  }

  return {
    data: [
      structuredData[0],
      ...structuredData
        .slice(1)
        .filter((section) => section.content || section.hierarchy !== rootTitle)
        .map((section) => {
          if (path.includes("wikicrow")) {
            if (section.title === "References" && section.content) {
              return {
                ...section,
                content: "",
                citations: processRefs(section.content),
              };
            }
          }

          if (section.title === "References" && section.content) {
            return {
              ...section,
              content: "",
              citations: parseWikipediaReferences(section.content),
            };
          }

          return section;
        }),
    ],
  };
}

export const parseWikipediaReferences = (
  input: string
): { citation: string; link: string }[] => {
  const pattern = /\[(\d+)\] ([^()]+) \((https?:\/\/[^\s]+)\)/g;

  const results: { id: string; text: string; url: string }[] = [];
  let match: RegExpExecArray | null;

  // Extract each match and store it in the results array
  while ((match = pattern.exec(input)) !== null) {
    const id = match[1];
    const text = match[2].trim();
    const url = match[3];

    results.push({ id, text, url });
  }

  console.log(results);

  return input
    .split("\n")
    .map((line) => line.trim())
    .filter((line) => line.length > 0)
    .map((reference) => {
      const linkMatch = reference.match(/\((https?:\/\/[^\s)]+)\)/);
      const link = linkMatch ? linkMatch[1] : "";

      const citation = reference.replace(/\s*\(https?:\/\/[^\s)]+\)\s*$/, "");

      return {
        citation: citation.trim(),
        link: link,
      };
    });
};

================
File: lib/types.ts
================
// Classification types
export type RequirementClassification =
  | "Imperative Standards"
  | "Best Practices"
  | "Flexible Guidelines"
  | "Contextual Considerations";

// Single requirement
export interface Requirement {
  id: string;
  description: string;
  reference?: string;
  classification: RequirementClassification;
  category: string;
  where: string;
  when: string;
}

// Group of requirements
export interface RequirementGroup {
  description: string;
  requirements: Requirement[];
}

// Full requirements index
export interface RequirementsIndex {
  groups: {
    [key: string]: RequirementGroup;
  };
}

// Props for the sidebar component
export interface RequirementsSidebarProps {
  groups: RequirementsIndex["groups"];
  onFilterChange: (
    searchQuery: string,
    classification: RequirementClassification | null
  ) => void;
}

// Rest of your types remain the same...
export interface RequirementProps {
  requirement: Requirement;
}

export interface Section {
  title: string;
  content: string;
  hierarchy: string;
  citations?: Citation[];
}

export interface Citation {
  citation: string;
  link: string;
}

export interface RequirementEvaluation {
  requirement_id: string;
  applicable: boolean;
  applicability_reasoning: string;
  score: number;
  confidence: number;
  evidence: string;
  reasoning: string;
  overlap_notes: string;
}

export interface FeedbackCategory {
  title: string;
  requirement_evaluations: RequirementEvaluation[];
  meta_notes: string;
}

export interface Feedback {
  [category: string]: FeedbackCategory[];
}

export interface ArticleSection {
  title: string;
  content: string;
  hierarchy: string;
  feedback: Feedback;
  citations?: { citation: string; link: string }[];
}

export interface CategoryScore {
  score: number;
  lastCalculated: Date;
  evaluations: RequirementEvaluation[];
}

export interface SectionState {
  isExpanded: boolean;
  lastViewed: Date;
  scores: Record<string, CategoryScore>;
}

================
File: lib/utils.ts
================
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

export const processRefs = (
  input: string
): { citation: string; link: string }[] =>
  input
    .replace(/\s+/g, " ")
    .trim()
    .split(/(?=\[\d+\.\s+\([^)]+\)\s+)/)
    .map((ref) => ref.trim())
    .filter((ref) => ref.length > 0)
    .map((reference) => {
      let processed = reference.replace(/^\[\d+\.\s+\([^)]+\)\s+/, "");

      const linkMatch = processed.match(/\]\((https?:\/\/[^\s)]+)/);
      const link = linkMatch ? linkMatch[1] : "";

      // Remove the "URL: http://dx.doi.org/..." part
      processed = processed.replace(
        /URL:\s*http:\/\/dx\.doi\.org\/[^,]+,\s*/,
        ""
      );

      processed = processed.replace(/\]\(.*\)$/, "");

      return {
        citation: processed.trim(),
        link: link,
      };
    });
